name: Create uat collective branch

on:
  workflow_dispatch:
    inputs:
      source-branch:
        description: "Source branch to get commits from (default: develop)"
        required: false
        default: "develop"
        type: string
      exclude-commits:
        description: "Comma-separated list of commit SHAs to exclude"
        required: false
        default: ""
        type: string
      exclude-prs:
        description: "Comma-separated list of PR numbers to exclude (entire PRs)"
        required: false
        default: ""
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  create--uat-collective-branch:
    runs-on: ubuntu-latest
    if: github.event.label.name == 'uat' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout uat branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: uat
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine branch name
        id: branch-name
        run: |
          BRANCH_NAME="uat-collective-$(date +%Y%m%d-%H%M%S)"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Using branch: $BRANCH_NAME"

      - name: Create branch
        run: |
          git checkout -b ${{ steps.branch-name.outputs.branch_name }}
          echo "Created branch: ${{ steps.branch-name.outputs.branch_name }}"

      - name: Parse excluded items
        id: exclude-items
        run: |
          # Parse excluded commits
          EXCLUDED_COMMITS="${{ github.event.inputs.exclude-commits }}"
          if [ -n "$EXCLUDED_COMMITS" ]; then
            EXCLUDED_COMMITS_JSON=$(echo "$EXCLUDED_COMMITS" | jq -R -s -c 'split(",") | map(select(. != ""))')
          else
            EXCLUDED_COMMITS_JSON="[]"
          fi
          echo "excluded_commits=$EXCLUDED_COMMITS_JSON" >> $GITHUB_OUTPUT

          # Parse excluded PRs
          EXCLUDED_PRS="${{ github.event.inputs.exclude-prs }}"
          if [ -n "$EXCLUDED_PRS" ]; then
            EXCLUDED_PRS_JSON=$(echo "$EXCLUDED_PRS" | jq -R -s -c 'split(",") | map(select(. != ""))')
          else
            EXCLUDED_PRS_JSON="[]"
          fi
          echo "excluded_prs=$EXCLUDED_PRS_JSON" >> $GITHUB_OUTPUT

          echo "Excluded commits: $EXCLUDED_COMMITS_JSON"
          echo "Excluded PRs: $EXCLUDED_PRS_JSON"

      - name: Fetch source branch
        run: |
          git fetch origin ${{ github.event.inputs.source-branch || 'develop' }}:source-branch
          echo "Fetched source branch: ${{ github.event.inputs.source-branch || 'develop' }}"

      - name: Get UAT PRs from source branch
        id: get-uat-prs
        run: |
          # Get all merged PRs with uat label targeting the source branch
          PRS_JSON=$(gh pr list --base "${{ github.event.inputs.source-branch || 'develop' }}" --state merged --label uat --json number,title,headRefName,url,mergeCommit)

          echo "prs_json<<EOF" >> $GITHUB_OUTPUT
          echo "$PRS_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          PR_COUNT=$(echo "$PRS_JSON" | jq length)
          echo "pr_count=$PR_COUNT" >> $GITHUB_OUTPUT
          echo "Found $PR_COUNT UAT PRs"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}

      - name: Get commits from UAT PRs
        id: get-uat-commits
        run: |
          PRS_JSON='${{ steps.get-uat-prs.outputs.prs_json }}'
          EXCLUDED_PRS='${{ steps.exclude-items.outputs.excluded_prs }}'
          ALL_UAT_COMMITS="[]"

          for row in $(echo "$PRS_JSON" | jq -r '.[] | @base64'); do
            _jq() {
              echo ${row} | base64 --decode | jq -r ${1}
            }
            
            PR_NUMBER=$(_jq '.number')
            PR_TITLE=$(_jq '.title')
            PR_BRANCH=$(_jq '.headRefName')
            PR_URL=$(_jq '.url')
            MERGE_COMMIT=$(_jq '.mergeCommit.oid')
            
            echo "Processing PR #$PR_NUMBER: $PR_TITLE"
            
            # Check if entire PR should be excluded
            if echo "$EXCLUDED_PRS" | jq -r '.[]' | grep -q "^$PR_NUMBER$"; then
              echo "Skipping entire PR #$PR_NUMBER - excluded by filter"
              continue
            fi
            
            # Get all commits from this PR
            PR_COMMITS_JSON=$(gh pr view $PR_NUMBER --json commits || echo '{"commits":[]}')
            COMMITS=$(echo "$PR_COMMITS_JSON" | jq -c '.commits[]')
            
            # Add PR info to each commit
            for commit_row in $(echo "$COMMITS" | jq -r '@base64'); do
              _commit_jq() {
                echo ${commit_row} | base64 --decode | jq -r ${1}
              }
              
              COMMIT_SHA=$(_commit_jq '.oid')
              COMMIT_MESSAGE=$(_commit_jq '.messageHeadline')
              COMMIT_AUTHOR=$(_commit_jq '.author.name')
              COMMIT_DATE=$(_commit_jq '.committedDate')
              
              COMMIT_OBJ=$(jq -n \
                --arg sha "$COMMIT_SHA" \
                --arg message "$COMMIT_MESSAGE" \
                --arg author "$COMMIT_AUTHOR" \
                --arg date "$COMMIT_DATE" \
                --arg pr_number "$PR_NUMBER" \
                --arg pr_title "$PR_TITLE" \
                --arg pr_url "$PR_URL" \
                '{
                  sha: $sha,
                  message: $message,
                  author: $author,
                  date: $date,
                  pr_number: $pr_number,
                  pr_title: $pr_title,
                  pr_url: $pr_url
                }')
              
              ALL_UAT_COMMITS=$(echo "$ALL_UAT_COMMITS" | jq --argjson commit "$COMMIT_OBJ" '. + [$commit]')
            done
          done

          echo "uat_commits_json<<EOF" >> $GITHUB_OUTPUT
          echo "$ALL_UAT_COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          COMMIT_COUNT=$(echo "$ALL_UAT_COMMITS" | jq length)
          echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
          echo "Found $COMMIT_COUNT commits from UAT PRs (after PR exclusion)"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Filter commits already in uat branch
        id: filter-commits
        run: |
          UAT_COMMITS_JSON='${{ steps.get-uat-commits.outputs.uat_commits_json }}'
          FILTERED_COMMITS="[]"

          # Get all commit SHAs already in current uat branch
          EXISTING_COMMITS=$(git log --oneline --no-merges ${{ steps.branch-name.outputs.branch_name }} | awk '{print $1}')

          for i in $(seq 0 $(($(echo "$UAT_COMMITS_JSON" | jq length) - 1))); do
            COMMIT_SHA=$(echo "$UAT_COMMITS_JSON" | jq -r ".[$i].sha")
            
            # Check if commit is already in uat branch
            if ! echo "$EXISTING_COMMITS" | grep -q "${COMMIT_SHA:0:7}"; then
              # Commit not found in uat branch, add to filtered list
              COMMIT_DATA=$(echo "$UAT_COMMITS_JSON" | jq ".[$i]")
              FILTERED_COMMITS=$(echo "$FILTERED_COMMITS" | jq --argjson commit "$COMMIT_DATA" '. + [$commit]')
            fi
          done

          echo "filtered_commits_json<<EOF" >> $GITHUB_OUTPUT
          echo "$FILTERED_COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          FILTERED_COUNT=$(echo "$FILTERED_COMMITS" | jq length)
          echo "filtered_count=$FILTERED_COUNT" >> $GITHUB_OUTPUT
          echo "Filtered to $FILTERED_COUNT commits not in uat branch"

      - name: Merge UAT PR commits with exclusion
        id: merge-uat-commits
        run: |
          COMMITS_JSON='${{ steps.filter-commits.outputs.filtered_commits_json }}'
          EXCLUDED_COMMITS='${{ steps.exclude-items.outputs.excluded_commits }}'

          MERGE_SUMMARY="## UAT Merge Summary - $(date +'%Y-%m-%d %H:%M:%S')\n\n"
          MERGE_SUMMARY+="### UAT PR Commit Merge Results:\n\n"
          MERGE_SUMMARY+="**Source branch:** ${{ github.event.inputs.source-branch || 'develop' }}\n"
          MERGE_SUMMARY+="**Excluded commits:** ${{ github.event.inputs.exclude-commits || 'None' }}\n"
          MERGE_SUMMARY+="**Excluded PRs:** ${{ github.event.inputs.exclude-prs || 'None' }}\n\n"

          SUCCESS_COUNT=0
          FAILED_COUNT=0
          EXCLUDED_COMMIT_COUNT=0
          EXCLUDED_PR_COUNT=0
          TOTAL_COMMITS=$(echo "$COMMITS_JSON" | jq length)

          # Check if commit should be excluded
          should_exclude_commit() {
            local commit_sha=$1
            local excluded_list=$2
            
            # Convert JSON array to bash array
            IFS=$'\n' read -r -d '' -a excluded_array < <(echo "$excluded_list" | jq -r '.[]' && printf '\0')
            
            for excluded_commit in "${excluded_array[@]}"; do
              if [ "$commit_sha" = "$excluded_commit" ]; then
                return 0
              fi
            done
            return 1
          }

          # Count excluded PRs
          EXCLUDED_PR_COUNT=$((${{ steps.get-uat-prs.outputs.pr_count }} - $(echo "$COMMITS_JSON" | jq 'map(.pr_number) | unique | length')))
          echo "excluded_pr_count=$EXCLUDED_PR_COUNT" >> $GITHUB_OUTPUT

          # Process commits
          for i in $(seq 0 $(($TOTAL_COMMITS - 1))); do
            COMMIT_SHA=$(echo "$COMMITS_JSON" | jq -r ".[$i].sha")
            COMMIT_MESSAGE=$(echo "$COMMITS_JSON" | jq -r ".[$i].message")
            COMMIT_AUTHOR=$(echo "$COMMITS_JSON" | jq -r ".[$i].author")
            COMMIT_DATE=$(echo "$COMMITS_JSON" | jq -r ".[$i].date")
            PR_NUMBER=$(echo "$COMMITS_JSON" | jq -r ".[$i].pr_number")
            PR_TITLE=$(echo "$COMMITS_JSON" | jq -r ".[$i].pr_title")
            PR_URL=$(echo "$COMMITS_JSON" | jq -r ".[$i].pr_url")
            
            echo "Processing commit: $COMMIT_SHA from PR #$PR_NUMBER"

            # Check if this commit should be excluded
            if should_exclude_commit "$COMMIT_SHA" "$EXCLUDED_COMMITS"; then
              MERGE_SUMMARY+="🚫 \`${COMMIT_SHA:0:7}\`: $COMMIT_MESSAGE (PR [#$PR_NUMBER]($PR_URL)) - Excluded commit\n"
              EXCLUDED_COMMIT_COUNT=$((EXCLUDED_COMMIT_COUNT + 1))
              echo "Excluding commit: $COMMIT_SHA from PR #$PR_NUMBER"
              continue
            fi

            # Attempt to cherry-pick the commit
            echo "Attempting to cherry-pick commit: $COMMIT_SHA from PR #$PR_NUMBER"
            if git cherry-pick $COMMIT_SHA 2>&1; then
              MERGE_SUMMARY+="✅ \`${COMMIT_SHA:0:7}\`: $COMMIT_MESSAGE (PR [#$PR_NUMBER]($PR_URL)) - Merged successfully\n"
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              echo "Successfully cherry-picked commit: $COMMIT_SHA from PR #$PR_NUMBER"
            else
              MERGE_SUMMARY+="❌ \`${COMMIT_SHA:0:7}\`: $COMMIT_MESSAGE (PR [#$PR_NUMBER]($PR_URL)) - Merge failed\n"
              FAILED_COUNT=$((FAILED_COUNT + 1))
              echo "Failed to cherry-pick commit: $COMMIT_SHA from PR #$PR_NUMBER"
              git cherry-pick --abort 2>/dev/null || true
            fi
          done

          echo "success_count=$SUCCESS_COUNT" >> $GITHUB_OUTPUT
          echo "failed_count=$FAILED_COUNT" >> $GITHUB_OUTPUT
          echo "excluded_commit_count=$EXCLUDED_COMMIT_COUNT" >> $GITHUB_OUTPUT

          if [ $SUCCESS_COUNT -gt 0 ]; then
            echo "merge_status=success" >> $GITHUB_OUTPUT
          elif [ $TOTAL_COMMITS -eq 0 ]; then
            echo "merge_status=no_commits" >> $GITHUB_OUTPUT
          else
            echo "merge_status=failed" >> $GITHUB_OUTPUT
          fi

          MERGE_SUMMARY+="\n### Summary:\n"
          MERGE_SUMMARY+="- ✅ Successfully merged: $SUCCESS_COUNT commits\n"
          MERGE_SUMMARY+="- ❌ Failed: $FAILED_COUNT commits\n"
          MERGE_SUMMARY+="- 🚫 Excluded commits: $EXCLUDED_COMMIT_COUNT commits\n"
          MERGE_SUMMARY+="- 🔇 Excluded PRs: $EXCLUDED_PR_COUNT PRs\n"
          MERGE_SUMMARY+="- 📊 Total UAT PR commits processed: $TOTAL_COMMITS\n"
          MERGE_SUMMARY+="- 🔖 UAT PRs found: ${{ steps.get-uat-prs.outputs.pr_count }}\n"

          echo -e "$MERGE_SUMMARY" > merge_summary.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push branch
        if: steps.merge-uat-commits.outputs.merge_status == 'success'
        run: |
          git push origin ${{ steps.branch-name.outputs.branch_name }}
          echo "Pushed branch: ${{ steps.branch-name.outputs.branch_name }}"

      - name: Output results
        run: |
          echo "=== UAT Merge Operation Complete ==="
          echo "Branch: ${{ steps.branch-name.outputs.branch_name }}"
          echo "Source branch: ${{ github.event.inputs.source-branch || 'develop' }}"
          echo "Merge Status: ${{ steps.merge-uat-commits.outputs.merge_status }}"
          echo "UAT PRs found: ${{ steps.get-uat-prs.outputs.pr_count }}"
          echo "UAT commits found: ${{ steps.get-uat-commits.outputs.commit_count }}"
          echo "Commits to process: ${{ steps.filter-commits.outputs.filtered_count }}"
          echo "Successfully merged: ${{ steps.merge-uat-commits.outputs.success_count }}"
          echo "Failed: ${{ steps.merge-uat-commits.outputs.failed_count }}"
          echo "Excluded commits: ${{ steps.merge-uat-commits.outputs.excluded_commit_count }}"
          echo "Excluded PRs: ${{ steps.merge-uat-commits.outputs.excluded_pr_count }}"
          echo "Final status: ${{ steps.merge-uat-commits.outputs.merge_status }}"

          if [ -f merge_summary.md ]; then
            echo "Merge Summary:"
            cat merge_summary.md
          fi

      - name: Cleanup on failure
        if: failure()
        run: |
          echo "Workflow failed. Cleaning up..."
          # Try to delete the temporary branch if it was created
          git checkout uat
          git branch -D ${{ steps.branch-name.outputs.branch_name }} 2>/dev/null || true
          echo "Cleanup completed"
