name: Create uat collective branch

on:
  workflow_dispatch:
    inputs:
      source-branch:
        description: "Source branch to get commits from (default: develop)"
        required: false
        default: "develop"
        type: string
      exclude-commits:
        description: "Comma-separated list of commit SHAs to exclude from merging"
        required: false
        default: ""
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  create--uat-collective-branch:
    runs-on: ubuntu-latest
    if: github.event.label.name == 'uat' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout uat branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: uat
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine branch name
        id: branch-name
        run: |
          BRANCH_NAME="uat-collective-$(date +%Y%m%d-%H%M%S)"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Using branch: $BRANCH_NAME"

      - name: Create branch
        run: |
          git checkout -b ${{ steps.branch-name.outputs.branch_name }}
          echo "Created branch: ${{ steps.branch-name.outputs.branch_name }}"

      - name: Parse excluded commits
        id: exclude-commits
        run: |
          EXCLUDED_COMMITS="${{ github.event.inputs.exclude-commits }}"
          # Convert comma-separated list to JSON array
          if [ -n "$EXCLUDED_COMMITS" ]; then
            EXCLUDED_JSON=$(echo "$EXCLUDED_COMMITS" | jq -R -s -c 'split(",") | map(select(. != ""))')
          else
            EXCLUDED_JSON="[]"
          fi
          echo "excluded_commits=$EXCLUDED_JSON" >> $GITHUB_OUTPUT
          echo "Excluded commits: $EXCLUDED_JSON"

      - name: Fetch source branch
        run: |
          git fetch origin ${{ github.event.inputs.source-branch || 'develop' }}:source-branch
          echo "Fetched source branch: ${{ github.event.inputs.source-branch || 'develop' }}"

      - name: Get commits to merge
        id: get-commits
        run: |
          SOURCE_BRANCH="${{ github.event.inputs.source-branch || 'develop' }}"

          # Get all commits that are in source branch but not in current uat branch
          COMMITS_JSON=$(git log --pretty=format:'{"sha":"%H","author":"%an","date":"%ad","subject":"%s"}' --no-merges ${{ steps.branch-name.outputs.branch_name }}..source-branch | jq -s '.')

          echo "commits_json<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          COMMIT_COUNT=$(echo "$COMMITS_JSON" | jq length)
          echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
          echo "Found $COMMIT_COUNT commits to process"

      - name: Merge commits with exclusion
        id: merge-commits
        run: |
          COMMITS_JSON='${{ steps.get-commits.outputs.commits_json }}'
          EXCLUDED_COMMITS='${{ steps.exclude-commits.outputs.excluded_commits }}'

          MERGE_SUMMARY="## UAT Merge Summary - $(date +'%Y-%m-%d %H:%M:%S')\n\n"
          MERGE_SUMMARY+="### Commit Merge Results:\n\n"
          MERGE_SUMMARY+="**Source branch:** ${{ github.event.inputs.source-branch || 'develop' }}\n"
          MERGE_SUMMARY+="**Excluded commits:** ${{ github.event.inputs.exclude-commits || 'None' }}\n\n"

          SUCCESS_COUNT=0
          FAILED_COUNT=0
          EXCLUDED_COUNT=0
          TOTAL_COMMITS=$(echo "$COMMITS_JSON" | jq length)

          # Check if commit should be excluded
          should_exclude_commit() {
            local commit_sha=$1
            local excluded_list=$2
            
            # Convert JSON array to bash array
            IFS=$'\n' read -r -d '' -a excluded_array < <(echo "$excluded_list" | jq -r '.[]' && printf '\0')
            
            for excluded_commit in "${excluded_array[@]}"; do
              if [ "$commit_sha" = "$excluded_commit" ]; then
                return 0
              fi
            done
            return 1
          }

          # Process commits in reverse order (oldest first) to maintain history
          for i in $(seq 0 $(($TOTAL_COMMITS - 1))); do
            COMMIT_SHA=$(echo "$COMMITS_JSON" | jq -r ".[$i].sha")
            COMMIT_AUTHOR=$(echo "$COMMITS_JSON" | jq -r ".[$i].author")
            COMMIT_DATE=$(echo "$COMMITS_JSON" | jq -r ".[$i].date")
            COMMIT_SUBJECT=$(echo "$COMMITS_JSON" | jq -r ".[$i].subject")
            
            echo "Processing commit: $COMMIT_SHA - $COMMIT_SUBJECT"

            # Check if this commit should be excluded
            if should_exclude_commit "$COMMIT_SHA" "$EXCLUDED_COMMITS"; then
              MERGE_SUMMARY+="🚫 \`${COMMIT_SHA:0:7}\`: $COMMIT_SUBJECT - Excluded\n"
              EXCLUDED_COUNT=$((EXCLUDED_COUNT + 1))
              echo "Excluding commit: $COMMIT_SHA"
              continue
            fi

            # Attempt to cherry-pick the commit
            echo "Attempting to cherry-pick commit: $COMMIT_SHA"
            if git cherry-pick $COMMIT_SHA 2>&1; then
              MERGE_SUMMARY+="✅ \`${COMMIT_SHA:0:7}\`: $COMMIT_SUBJECT - Merged successfully\n"
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              echo "Successfully cherry-picked commit: $COMMIT_SHA"
            else
              MERGE_SUMMARY+="❌ \`${COMMIT_SHA:0:7}\`: $COMMIT_SUBJECT - Merge failed\n"
              FAILED_COUNT=$((FAILED_COUNT + 1))
              echo "Failed to cherry-pick commit: $COMMIT_SHA"
              git cherry-pick --abort 2>/dev/null || true
              
              # If cherry-pick fails, try to apply as a patch
              echo "Trying to apply as patch..."
              if git show $COMMIT_SHA | git apply --3way - 2>&1; then
                if git commit -m "$COMMIT_SUBJECT" --author="$COMMIT_AUTHOR" --date="$COMMIT_DATE" 2>&1; then
                  MERGE_SUMMARY+="   ↳ ✅ Applied as patch successfully\n"
                  SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
                  echo "Successfully applied commit as patch: $COMMIT_SHA"
                else
                  MERGE_SUMMARY+="   ↳ ❌ Failed to commit patch\n"
                  echo "Failed to commit patch for: $COMMIT_SHA"
                  git reset --hard HEAD 2>/dev/null || true
                fi
              else
                MERGE_SUMMARY+="   ↳ ❌ Failed to apply patch\n"
                echo "Failed to apply patch for: $COMMIT_SHA"
                git reset --hard HEAD 2>/dev/null || true
              fi
            fi
          done

          echo "success_count=$SUCCESS_COUNT" >> $GITHUB_OUTPUT
          echo "failed_count=$FAILED_COUNT" >> $GITHUB_OUTPUT
          echo "excluded_count=$EXCLUDED_COUNT" >> $GITHUB_OUTPUT

          if [ $SUCCESS_COUNT -gt 0 ]; then
            echo "merge_status=success" >> $GITHUB_OUTPUT
          elif [ $EXCLUDED_COUNT -eq $TOTAL_COMMITS ]; then
            echo "merge_status=all_excluded" >> $GITHUB_OUTPUT
          else
            echo "merge_status=failed" >> $GITHUB_OUTPUT
          fi

          MERGE_SUMMARY+="\n### Summary:\n"
          MERGE_SUMMARY+="- ✅ Successfully merged: $SUCCESS_COUNT\n"
          MERGE_SUMMARY+="- ❌ Failed: $FAILED_COUNT\n"
          MERGE_SUMMARY+="- 🚫 Excluded: $EXCLUDED_COUNT\n"
          MERGE_SUMMARY+="- 📊 Total commits: $TOTAL_COMMITS\n"

          echo -e "$MERGE_SUMMARY" > merge_summary.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push branch
        if: steps.merge-commits.outputs.merge_status == 'success'
        run: |
          git push origin ${{ steps.branch-name.outputs.branch_name }}
          echo "Pushed branch: ${{ steps.branch-name.outputs.branch_name }}"

      - name: Output results
        run: |
          echo "=== UAT Merge Operation Complete ==="
          echo "Branch: ${{ steps.branch-name.outputs.branch_name }}"
          echo "Source branch: ${{ github.event.inputs.source-branch || 'develop' }}"
          echo "Merge Status: ${{ steps.merge-commits.outputs.merge_status }}"
          echo "Total commits found: ${{ steps.get-commits.outputs.commit_count }}"
          echo "Successfully merged: ${{ steps.merge-commits.outputs.success_count }}"
          echo "Failed: ${{ steps.merge-commits.outputs.failed_count }}"
          echo "Excluded: ${{ steps.merge-commits.outputs.excluded_count }}"
          echo "Final status: ${{ steps.merge-commits.outputs.merge_status }}"

          if [ -f merge_summary.md ]; then
            echo "Merge Summary:"
            cat merge_summary.md
          fi

      - name: Cleanup on failure
        if: failure()
        run: |
          echo "Workflow failed. Cleaning up..."
          # Try to delete the temporary branch if it was created
          git checkout uat
          git branch -D ${{ steps.branch-name.outputs.branch_name }} 2>/dev/null || true
          echo "Cleanup completed"
