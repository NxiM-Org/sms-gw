name: Create uat collective branch

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  create--uat-collective-branch:
    runs-on: ubuntu-latest
    if: github.event.label.name == 'uat' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout uat branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: uat
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine branch name
        id: branch-name
        run: |
          BRANCH_NAME="uat-collective-$(date +%Y%m%d-%H%M%S)"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Using branch: $BRANCH_NAME"

      - name: Create branch
        run: |
          git checkout -b ${{ steps.branch-name.outputs.branch_name }}
          echo "Created branch: ${{ steps.branch-name.outputs.branch_name }}"

      - name: Get UAT PRs to merge
        id: get-prs
        run: |
          # Get all PRs with uat label targeting develop
          PRS_JSON=$(gh pr list --repo "$REPO" --state merged --label uat --base develop --json number,title,headRefName,url,state)
          echo "prs_json<<EOF" >> $GITHUB_OUTPUT
          echo "$PRS_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          PR_COUNT=$(echo "$PRS_JSON" | jq length)
          echo "pr_count=$PR_COUNT" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify and merge PRs
        id: verify-merge-prs
        run: |
          PRS_JSON='${{ steps.get-prs.outputs.prs_json }}'
          MERGE_SUMMARY="## UAT Merge Summary - $(date +'%Y-%m-%d %H:%M:%S')\n\n"
          MERGE_SUMMARY+="### PR Merge Results:\n\n"

          SUCCESS_COUNT=0
          FAILED_COUNT=0
          SKIPPED_COUNT=0

          # Check if branch exists before attempting merge
          check_branch_exists() {
            local branch_name=$1
            # Check if branch exists remotely
            if git ls-remote --heads origin $branch_name | grep -q "refs/heads/$branch_name"; then
              return 0
            else
              return 1
            fi
          }

          # Check if PR is already merged
          check_pr_merged() {
            local pr_number=$1
            # Use gh pr view to get detailed PR info including merge status
            pr_info=$(gh pr view $pr_number --json merged 2>/dev/null || echo '{"merged":false}')
            merged=$(echo "$pr_info" | jq -r '.merged')
            [ "$merged" = "true" ] && return 0 || return 1
          }

          for row in $(echo "$PRS_JSON" | jq -r '.[] | @base64'); do
            _jq() {
              echo ${row} | base64 --decode | jq -r ${1}
            }
            
            PR_NUMBER=$(_jq '.number')
            PR_TITLE=$(_jq '.title')
            PR_BRANCH=$(_jq '.headRefName')
            PR_URL=$(_jq '.url')
            PR_STATE=$(_jq '.state')
            
            echo "Processing PR #$PR_NUMBER: $PR_TITLE (branch: $PR_BRANCH)"

            # Check if PR is already merged using individual PR view
            if check_pr_merged $PR_NUMBER; then
              MERGE_SUMMARY+="➖ **#$PR_NUMBER**: [$PR_TITLE]($PR_URL) - Skipped (Already merged)\n"
              SKIPPED_COUNT=$((SKIPPED_COUNT + 1))
              echo "Skipping PR #$PR_NUMBER - already merged"
              continue
            fi

            # Check if branch exists
            if ! check_branch_exists $PR_BRANCH; then
              MERGE_SUMMARY+="❌ **#$PR_NUMBER**: [$PR_TITLE]($PR_URL) - Branch '$PR_BRANCH' not found\n"
              FAILED_COUNT=$((FAILED_COUNT + 1))
              echo "Branch $PR_BRANCH not found for PR #$PR_NUMBER"
              continue
            fi

            # Fetch the PR branch with retry logic
            echo "Fetching branch: $PR_BRANCH"
            FETCH_ATTEMPTS=3
            FETCH_SUCCESS=false
            
            for attempt in $(seq 1 $FETCH_ATTEMPTS); do
              echo "Fetch attempt $attempt of $FETCH_ATTEMPTS"
              if git fetch origin $PR_BRANCH 2>&1; then
                FETCH_SUCCESS=true
                break
              else
                echo "Fetch failed on attempt $attempt, waiting 2 seconds..."
                sleep 2
              fi
            done

            if [ "$FETCH_SUCCESS" = false ]; then
              MERGE_SUMMARY+="❌ **#$PR_NUMBER**: [$PR_TITLE]($PR_URL) - Failed to fetch branch after $FETCH_ATTEMPTS attempts\n"
              FAILED_COUNT=$((FAILED_COUNT + 1))
              continue
            fi

            # Attempt to merge
            echo "Attempting to merge PR #$PR_NUMBER"
            if git merge --no-ff -m "Merge pull request #$PR_NUMBER from $PR_BRANCH" FETCH_HEAD 2>&1; then
              MERGE_SUMMARY+="✅ **#$PR_NUMBER**: [$PR_TITLE]($PR_URL) - Merged successfully"
              if [ "$PR_STATE" != "OPEN" ]; then
                MERGE_SUMMARY+=" (PR was $PR_STATE)"
              fi
              MERGE_SUMMARY+="\n"
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              echo "Successfully merged PR #$PR_NUMBER"
            else
              MERGE_SUMMARY+="⚠️ **#$PR_NUMBER**: [$PR_TITLE]($PR_URL) - Merge conflict"
              if [ "$PR_STATE" != "OPEN" ]; then
                MERGE_SUMMARY+=" (PR was $PR_STATE)"
              fi
              MERGE_SUMMARY+="\n"
              FAILED_COUNT=$((FAILED_COUNT + 1))
              echo "Merge conflict in PR #$PR_NUMBER"
              git merge --abort 2>/dev/null || true
            fi
          done

          echo "success_count=$SUCCESS_COUNT" >> $GITHUB_OUTPUT
          echo "failed_count=$FAILED_COUNT" >> $GITHUB_OUTPUT
          echo "skipped_count=$SKIPPED_COUNT" >> $GITHUB_OUTPUT

          if [ $SUCCESS_COUNT -gt 0 ]; then
            echo "merge_status=partial_success" >> $GITHUB_OUTPUT
          else
            echo "merge_status=failed" >> $GITHUB_OUTPUT
          fi

          MERGE_SUMMARY+="\n### Summary:\n"
          MERGE_SUMMARY+="- ✅ Successfully merged: $SUCCESS_COUNT\n"
          MERGE_SUMMARY+="- ❌ Failed: $FAILED_COUNT\n"
          MERGE_SUMMARY+="- ➖ Skipped (already merged): $SKIPPED_COUNT\n"

          echo -e "$MERGE_SUMMARY" > merge_summary.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Record merged branches
      #   id: record-merged
      #   run: |
      #     MERGED_BRANCHES_FILE="merged_branches.txt"
      #     touch "$MERGED_BRANCHES_FILE"

      #     PRS_JSON='${{ steps.get-prs.outputs.prs_json }}'

      #     # Create a temporary file to store merge details
      #     MERGE_DETAILS_FILE="merge_details.txt"

      #     # Extract PR number and branch for successful merges from PRS_JSON
      #     echo "$PRS_JSON" | jq -c '.[]' | while read -r pr; do
      #       PR_NUMBER=$(echo "$pr" | jq -r '.number')
      #       PR_BRANCH=$(echo "$pr" | jq -r '.headRefName')

      #       # Check if this PR was successfully merged by looking in merge_summary.md
      #       if grep -q "✅.*#$PR_NUMBER" merge_summary.md 2>/dev/null; then
      #         echo "$PR_BRANCH" >> "$MERGED_BRANCHES_FILE"
      #       fi
      #     done

      #     echo "merged_branches_file=$MERGED_BRANCHES_FILE" >> $GITHUB_OUTPUT

      #     SUCCESS_COUNT=$(wc -l < "$MERGED_BRANCHES_FILE" | tr -d ' ')
      #     echo "Recorded $SUCCESS_COUNT branches for deletion."

      - name: Push branch
        if: steps.verify-merge-prs.outputs.merge_status == 'partial_success'
        run: |
          git push origin ${{ steps.branch-name.outputs.branch_name }}
          echo "Pushed branch: ${{ steps.branch-name.outputs.branch_name }}"

      # - name: Delete merged UAT branches
      #   if: steps.verify-merge-prs.outputs.merge_status == 'partial_success'
      #   run: |
      #     echo "Attempting to delete merged UAT branches..."

      #     if [ ! -f "${{ steps.record-merged.outputs.merged_branches_file }}" ]; then
      #       echo "No merged branches file found."
      #       exit 0
      #     fi

      #     while IFS= read -r branch; do
      #       if [ -n "$branch" ]; then
      #         echo "Deleting branch: $branch"
      #         # Delete the remote branch
      #         git push origin --delete "$branch" 2>&1 || echo "Failed to delete branch $branch"
      #       fi
      #     done < "${{ steps.record-merged.outputs.merged_branches_file }}"

      #     echo "Finished attempting to delete merged UAT branches."

      - name: Output results
        run: |
          echo "=== UAT Merge Operation Complete ==="
          echo "Branch: ${{ steps.branch-name.outputs.branch_name }}"
          echo "Merge Status: ${{ steps.verify-merge-prs.outputs.merge_status }}"
          echo "Total PRs found: ${{ steps.verify-merge-prs.outputs.pr_count }}"
          echo "Successfully merged: ${{ steps.verify-merge-prs.outputs.success_count }}"
          echo "Failed: ${{ steps.verify-merge-prs.outputs.failed_count }}"
          echo "Skipped (already merged): ${{ steps.verify-merge-prs.outputs.skipped_count }}"
          echo "Final status: ${{ steps.verify-merge-prs.outputs.merge_status }}"

          if [ -f merge_summary.md ]; then
            echo "Merge Summary:"
            cat merge_summary.md
          fi

      - name: Cleanup on failure
        if: failure()
        run: |
          echo "Workflow failed. Cleaning up..."
          # Try to delete the temporary branch if it was created
          git checkout uat
          git branch -D ${{ steps.branch-name.outputs.branch_name }} 2>/dev/null || true
          echo "Cleanup completed"
